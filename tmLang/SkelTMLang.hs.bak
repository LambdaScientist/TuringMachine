module SkelTMLang where

-- Haskell module generated by the BNF converter

import AbsTMLang
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transTMIdent :: TMIdent -> Result
transTMIdent x = case x of
  TMIdent string -> failure x
transState :: State -> Result
transState x = case x of
  State ident -> failure x
transNextCommand :: NextCommand -> Result
transNextCommand x = case x of
  NContinue state -> failure x
  NAccept -> failure x
  NReject -> failure x
transSymbol :: Symbol -> Result
transSymbol x = case x of
  SWild -> failure x
  SBlank -> failure x
  STrue -> failure x
  SFalse -> failure x
transDirection :: Direction -> Result
transDirection x = case x of
  DStay -> failure x
  DLeft -> failure x
  DRight -> failure x
transInstruction :: Instruction -> Result
transInstruction x = case x of
  Instruction state symbol1 symbol2 direction nextcommand -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program instructions -> failure x

