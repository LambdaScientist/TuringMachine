

module AbsTMLang where

-- Haskell module generated by the BNF converter




newtype TMIdent = TMIdent String deriving (Eq, Ord, Show, Read)
data State = State TMIdent
  deriving (Eq, Ord, Show, Read)

data NextCommand = NContinue State | NAccept | NReject
  deriving (Eq, Ord, Show, Read)

data Symbol = SWild | SBlank | STrue | SFalse
  deriving (Eq, Ord, Show, Read)

data Direction = DStay | DLeft | DRight
  deriving (Eq, Ord, Show, Read)

data Instruction
    = Instruction { state :: State 
                  , currectSymbol :: Symbol 
                  , nextSymbol :: Symbol 
                  , direction :: Direction 
                  , nextCommad :: NextCommand }
  deriving (Eq, Ord, Show, Read)

data Program = Program [Instruction]
  deriving (Eq, Ord, Show, Read)

